'use strict';
define(['flight/lib/compose', 'flight/lib/component', 'marker-clusterer', '../utils/map_utils', '../utils/mobile_detection'], function(compose, defineComponent, markerClusterer, map_utils, mobileDetection) {
  var initMarkerClusters;
  initMarkerClusters = function() {
    compose.mixin(this, [mobileDetection]);
    this.defaultAttrs({
      mapPinCluster: map_utils.assetURL() + "/images/nonsprite/map/map_cluster_red4.png",
      markerClusterer: void 0,
      clusterSize: 10,
      clusterTextColor: 'black',
      clusterTextSize: 11,
      clusterFontWeight: 'bold'
    });
    this.clearMarkers = function() {
      this.unbindMarkers();
      return this.attr.markers.clearMarkers();
    };
    this.unbindMarkers = function() {
      var i, len, marker, ref, results;
      ref = this.attr.markerClusterer;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        marker = ref[i];
        results.push(google.maps.event.clearListeners(marker, "click"));
      }
      return results;
    };
    this.mapClusterOptions = function() {
      var batchSize, style;
      batchSize = this.isMobile() ? 200 : null;
      style = {
        height: 40,
        url: this.attr.mapPinCluster,
        width: 46,
        textColor: this.attr.clusterTextColor,
        textSize: this.attr.clusterTextSize,
        fontWeight: this.attr.clusterFontWeight
      };
      return {
        styles: [style, style, style, style, style],
        minimumClusterSize: this.attr.clusterSize,
        batchSize: batchSize
      };
    };
    this.initClusterer = function(ev, data) {
      return this.attr.markerClusterer = new MarkerClusterer(data.gMap, [], this.mapClusterOptions());
    };
    this.setClusterImage = function(ev, data) {
      this.attr.mapPinCluster = data.pinsClusterImage;
      return this.off(document, 'clusterImageChange');
    };
    return this.after('initialize', function() {
      this.on(document, 'mapRenderedFirst', this.initClusterer);
      return this.on(document, 'clusterImageChange', this.setClusterImage);
    });
  };
  return initMarkerClusters;
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpL2NsdXN0ZXJzLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFBLENBQUE7QUFBQSxNQUVBLENBQU8sQ0FDTCxvQkFESyxFQUVMLHNCQUZLLEVBR0wsa0JBSEssRUFJTCxvQkFKSyxFQUtMLDJCQUxLLENBQVAsRUFNRyxTQUNELE9BREMsRUFFRCxlQUZDLEVBR0QsZUFIQyxFQUlELFNBSkMsRUFLRCxlQUxDLEdBQUE7QUFRRCxNQUFBLGtCQUFBO0FBQUEsRUFBQSxrQkFBQSxHQUFxQixTQUFBLEdBQUE7QUFDbkIsSUFBQSxPQUFPLENBQUMsS0FBUixDQUFjLElBQWQsRUFBaUIsQ0FBQyxlQUFELENBQWpCLENBQUEsQ0FBQTtBQUFBLElBRUEsSUFBQyxDQUFBLFlBQUQsQ0FDRTtBQUFBLE1BQUEsYUFBQSxFQUFlLFNBQVMsQ0FBQyxRQUFWLENBQUEsQ0FBQSxHQUF1Qiw0Q0FBdEM7QUFBQSxNQUNBLGVBQUEsRUFBaUIsTUFEakI7QUFBQSxNQUVBLFdBQUEsRUFBYSxFQUZiO0FBQUEsTUFHQSxnQkFBQSxFQUFrQixPQUhsQjtBQUFBLE1BSUEsZUFBQSxFQUFpQixFQUpqQjtBQUFBLE1BS0EsaUJBQUEsRUFBbUIsTUFMbkI7S0FERixDQUZBLENBQUE7QUFBQSxJQVVBLElBQUMsQ0FBQSxZQUFELEdBQWdCLFNBQUEsR0FBQTtBQUNkLE1BQUEsSUFBQyxDQUFBLGFBQUQsQ0FBQSxDQUFBLENBQUE7YUFDQSxJQUFDLENBQUEsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFkLENBQUEsRUFGYztJQUFBLENBVmhCLENBQUE7QUFBQSxJQWNBLElBQUMsQ0FBQSxhQUFELEdBQWlCLFNBQUEsR0FBQTtBQUNmLFVBQUEsNEJBQUE7QUFBQTtBQUFBO1dBQUEscUNBQUE7d0JBQUE7QUFDRSxxQkFBQSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxjQUFsQixDQUFpQyxNQUFqQyxFQUF5QyxPQUF6QyxFQUFBLENBREY7QUFBQTtxQkFEZTtJQUFBLENBZGpCLENBQUE7QUFBQSxJQWtCQSxJQUFDLENBQUEsaUJBQUQsR0FBcUIsU0FBQSxHQUFBO0FBQ25CLFVBQUEsZ0JBQUE7QUFBQSxNQUFBLFNBQUEsR0FBZSxJQUFDLENBQUEsUUFBRCxDQUFBLENBQUgsR0FBb0IsR0FBcEIsR0FBNkIsSUFBekMsQ0FBQTtBQUFBLE1BQ0EsS0FBQSxHQUNFO0FBQUEsUUFBQSxNQUFBLEVBQVEsRUFBUjtBQUFBLFFBQ0EsR0FBQSxFQUFLLElBQUMsQ0FBQSxJQUFJLENBQUMsYUFEWDtBQUFBLFFBRUEsS0FBQSxFQUFPLEVBRlA7QUFBQSxRQUdBLFNBQUEsRUFBVyxJQUFDLENBQUEsSUFBSSxDQUFDLGdCQUhqQjtBQUFBLFFBSUEsUUFBQSxFQUFVLElBQUMsQ0FBQSxJQUFJLENBQUMsZUFKaEI7QUFBQSxRQUtBLFVBQUEsRUFBWSxJQUFDLENBQUEsSUFBSSxDQUFDLGlCQUxsQjtPQUZGLENBQUE7YUFTQTtBQUFBLFFBQUEsTUFBQSxFQUFRLENBQUMsS0FBRCxFQUFPLEtBQVAsRUFBYSxLQUFiLEVBQW1CLEtBQW5CLEVBQXlCLEtBQXpCLENBQVI7QUFBQSxRQUNBLGtCQUFBLEVBQW9CLElBQUMsQ0FBQSxJQUFJLENBQUMsV0FEMUI7QUFBQSxRQUVBLFNBQUEsRUFBVyxTQUZYO1FBVm1CO0lBQUEsQ0FsQnJCLENBQUE7QUFBQSxJQWdDQSxJQUFDLENBQUEsYUFBRCxHQUFpQixTQUFDLEVBQUQsRUFBSyxJQUFMLEdBQUE7YUFDZixJQUFDLENBQUEsSUFBSSxDQUFDLGVBQU4sR0FBNEIsSUFBQSxlQUFBLENBQWdCLElBQUksQ0FBQyxJQUFyQixFQUEyQixFQUEzQixFQUErQixJQUFDLENBQUEsaUJBQUQsQ0FBQSxDQUEvQixFQURiO0lBQUEsQ0FoQ2pCLENBQUE7QUFBQSxJQW1DQSxJQUFDLENBQUEsZUFBRCxHQUFtQixTQUFDLEVBQUQsRUFBSyxJQUFMLEdBQUE7QUFDakIsTUFBQSxJQUFDLENBQUEsSUFBSSxDQUFDLGFBQU4sR0FBc0IsSUFBSSxDQUFDLGdCQUEzQixDQUFBO2FBQ0EsSUFBQyxDQUFBLEdBQUQsQ0FBSyxRQUFMLEVBQWUsb0JBQWYsRUFGaUI7SUFBQSxDQW5DbkIsQ0FBQTtXQXVDQSxJQUFDLENBQUEsS0FBRCxDQUFPLFlBQVAsRUFBcUIsU0FBQSxHQUFBO0FBQ25CLE1BQUEsSUFBQyxDQUFBLEVBQUQsQ0FBSSxRQUFKLEVBQWMsa0JBQWQsRUFBa0MsSUFBQyxDQUFBLGFBQW5DLENBQUEsQ0FBQTthQUNBLElBQUMsQ0FBQSxFQUFELENBQUksUUFBSixFQUFjLG9CQUFkLEVBQW9DLElBQUMsQ0FBQSxlQUFyQyxFQUZtQjtJQUFBLENBQXJCLEVBeENtQjtFQUFBLENBQXJCLENBQUE7QUE0Q0EsU0FBTyxrQkFBUCxDQXBEQztBQUFBLENBTkgsQ0FGQSxDQUFBIiwiZmlsZSI6InVpL2NsdXN0ZXJzLmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmRlZmluZSBbXG4gICdmbGlnaHQvbGliL2NvbXBvc2UnLFxuICAnZmxpZ2h0L2xpYi9jb21wb25lbnQnLFxuICAnbWFya2VyLWNsdXN0ZXJlcicsXG4gICcuLi91dGlscy9tYXBfdXRpbHMnLFxuICAnLi4vdXRpbHMvbW9iaWxlX2RldGVjdGlvbidcbl0sIChcbiAgY29tcG9zZSxcbiAgZGVmaW5lQ29tcG9uZW50LFxuICBtYXJrZXJDbHVzdGVyZXIsXG4gIG1hcF91dGlscyxcbiAgbW9iaWxlRGV0ZWN0aW9uXG4pIC0+XG5cbiAgaW5pdE1hcmtlckNsdXN0ZXJzID0gLT5cbiAgICBjb21wb3NlLm1peGluKEAsIFttb2JpbGVEZXRlY3Rpb25dKVxuXG4gICAgQGRlZmF1bHRBdHRyc1xuICAgICAgbWFwUGluQ2x1c3RlcjogbWFwX3V0aWxzLmFzc2V0VVJMKCkgKyBcIi9pbWFnZXMvbm9uc3ByaXRlL21hcC9tYXBfY2x1c3Rlcl9yZWQ0LnBuZ1wiXG4gICAgICBtYXJrZXJDbHVzdGVyZXI6IHVuZGVmaW5lZFxuICAgICAgY2x1c3RlclNpemU6IDEwXG4gICAgICBjbHVzdGVyVGV4dENvbG9yOiAnYmxhY2snXG4gICAgICBjbHVzdGVyVGV4dFNpemU6IDExXG4gICAgICBjbHVzdGVyRm9udFdlaWdodDogJ2JvbGQnXG5cbiAgICBAY2xlYXJNYXJrZXJzID0gLT5cbiAgICAgIEB1bmJpbmRNYXJrZXJzKClcbiAgICAgIEBhdHRyLm1hcmtlcnMuY2xlYXJNYXJrZXJzKClcblxuICAgIEB1bmJpbmRNYXJrZXJzID0gLT5cbiAgICAgIGZvciBtYXJrZXIgaW4gQGF0dHIubWFya2VyQ2x1c3RlcmVyXG4gICAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LmNsZWFyTGlzdGVuZXJzIG1hcmtlciwgXCJjbGlja1wiXG5cbiAgICBAbWFwQ2x1c3Rlck9wdGlvbnMgPSAtPlxuICAgICAgYmF0Y2hTaXplID0gaWYgQGlzTW9iaWxlKCkgdGhlbiAyMDAgZWxzZSBudWxsXG4gICAgICBzdHlsZSA9XG4gICAgICAgIGhlaWdodDogNDBcbiAgICAgICAgdXJsOiBAYXR0ci5tYXBQaW5DbHVzdGVyXG4gICAgICAgIHdpZHRoOiA0NlxuICAgICAgICB0ZXh0Q29sb3I6IEBhdHRyLmNsdXN0ZXJUZXh0Q29sb3JcbiAgICAgICAgdGV4dFNpemU6IEBhdHRyLmNsdXN0ZXJUZXh0U2l6ZVxuICAgICAgICBmb250V2VpZ2h0OiBAYXR0ci5jbHVzdGVyRm9udFdlaWdodFxuXG4gICAgICBzdHlsZXM6IFtzdHlsZSxzdHlsZSxzdHlsZSxzdHlsZSxzdHlsZV1cbiAgICAgIG1pbmltdW1DbHVzdGVyU2l6ZTogQGF0dHIuY2x1c3RlclNpemVcbiAgICAgIGJhdGNoU2l6ZTogYmF0Y2hTaXplXG5cbiAgICBAaW5pdENsdXN0ZXJlciA9IChldiwgZGF0YSkgLT5cbiAgICAgIEBhdHRyLm1hcmtlckNsdXN0ZXJlciA9IG5ldyBNYXJrZXJDbHVzdGVyZXIoZGF0YS5nTWFwLCBbXSwgQG1hcENsdXN0ZXJPcHRpb25zKCkpXG5cbiAgICBAc2V0Q2x1c3RlckltYWdlID0gKGV2LCBkYXRhKSAtPlxuICAgICAgQGF0dHIubWFwUGluQ2x1c3RlciA9IGRhdGEucGluc0NsdXN0ZXJJbWFnZVxuICAgICAgQG9mZiBkb2N1bWVudCwgJ2NsdXN0ZXJJbWFnZUNoYW5nZSdcblxuICAgIEBhZnRlciAnaW5pdGlhbGl6ZScsIC0+XG4gICAgICBAb24gZG9jdW1lbnQsICdtYXBSZW5kZXJlZEZpcnN0JywgQGluaXRDbHVzdGVyZXJcbiAgICAgIEBvbiBkb2N1bWVudCwgJ2NsdXN0ZXJJbWFnZUNoYW5nZScsIEBzZXRDbHVzdGVySW1hZ2VcblxuICByZXR1cm4gaW5pdE1hcmtlckNsdXN0ZXJzXG4iXX0=