'use strict';
define(['jquery', 'underscore', 'flight/lib/component', 'accounting', '../utils/mobile_detection', './tool_tip'], function($, _, defineComponent, accounting, mobileDetection, toolTip) {
  var neighborhoodsOverlay;
  _.templateSettings = {
    interpolate: /\{\{(.+?)\}\}/g,
    evaluate: /<%(.+?)%>/g
  };
  neighborhoodsOverlay = function() {
    this.defaultAttrs({
      fusionApiUrl: "https://www.googleapis.com/fusiontables/v1/query?sql=",
      baseInfoHtml: "<strong>Neighborhood: </strong>{{hood}}",
      enableOnboardCalls: false,
      enableMouseover: false,
      tableId: void 0,
      apiKey: void 0,
      gMap: void 0,
      data: void 0,
      infoTemplate: void 0,
      polygons: [],
      wait: 200,
      polygonOptions: {
        mouseover: {
          strokeColor: "#000",
          strokeOpacity: .5,
          strokeWeight: 1,
          fillColor: "#000",
          fillOpacity: .2
        },
        mouseout: {
          strokeWeight: 0,
          fillOpacity: 0
        }
      },
      infoWindowData: {
        state: void 0,
        hood: void 0,
        population: void 0,
        growth: void 0,
        density: void 0,
        males: void 0,
        females: void 0,
        median_income: void 0,
        average_income: void 0
      }
    });
    this.hoodQuery = function(data) {
      var query;
      query = ["SELECT geometry, HOOD_NAME, STATENAME, MARKET, LATITUDE, LONGITUDE"];
      query.push("FROM " + this.attr.tableId);
      query.push("WHERE LATITUDE >= " + data.lat1 + " AND LATITUDE <= " + data.lat2);
      query.push("AND LONGITUDE >= " + data.lng1 + " AND LONGITUDE <= " + data.lng2);
      return query.join(' ');
    };
    this.addHoodsLayer = function(ev, data) {
      var ToolTip;
      this.attr.gMap = data.gMap;
      this.attr.data = data;
      this.attr.currentHood = this.attr.data.hoodDisplayName || this.attr.data.hood || '';
      ToolTip = toolTip["class"]();
      if (!this.toolTip) {
        this.toolTip = new ToolTip(this.attr.gMap);
      }
      return this.getKmlData(data);
    };
    this.getKmlData = function(data) {
      var query, url;
      query = this.hoodQuery(data);
      url = [this.attr.fusionApiUrl];
      url.push(encodeURIComponent(this.hoodQuery(data)));
      url.push("&key=" + this.attr.apiKey);
      return $.ajax({
        url: url.join(""),
        dataType: "jsonp",
        success: (function(_this) {
          return function(data) {
            return _this.buildPolygons(data);
          };
        })(this)
      });
    };
    this.buildPolygons = function(data) {
      var hoodData, i, len, polygonData, results, row, rows;
      if (!(data && data.rows)) {
        return;
      }
      rows = data.rows;
      this.clearPolygons();
      results = [];
      for (i = 0, len = rows.length; i < len; i++) {
        row = rows[i];
        if (!rows[0]) {
          continue;
        }
        polygonData = this.buildPaths(row);
        hoodData = this.buildHoodData(row);
        results.push(this.wireupPolygon(polygonData, hoodData));
      }
      return results;
    };
    this.wireupPolygon = function(polygonData, hoodData) {
      var hoodLayer, initialOptions, isCurrentHood, mouseOutOptions, mouseOverOptions;
      mouseOverOptions = this.attr.polygonOptions.mouseover;
      mouseOutOptions = this.attr.polygonOptions.mouseout;
      isCurrentHood = this.attr.currentHood === hoodData.hood;
      initialOptions = isCurrentHood ? mouseOverOptions : mouseOutOptions;
      hoodLayer = new google.maps.Polygon(_.extend({
        paths: polygonData
      }, initialOptions));
      hoodLayer.setMap(this.attr.gMap);
      google.maps.event.addListener(hoodLayer, "mouseover", (function(_this) {
        return function(event) {
          hoodLayer.setOptions(mouseOverOptions);
          return _this.setupMouseOver(event, {
            data: hoodData,
            hoodLayer: hoodLayer
          });
        };
      })(this));
      google.maps.event.addListener(hoodLayer, "click", (function(_this) {
        return function(event) {
          var data;
          data = _.extend(hoodLayer, hoodData, event);
          return _this.showInfoWindow(event, hoodData);
        };
      })(this));
      google.maps.event.addListener(hoodLayer, "mouseout", (function(_this) {
        return function() {
          _this.toolTip.hide();
          if (!isCurrentHood) {
            return hoodLayer.setOptions(mouseOutOptions);
          }
        };
      })(this));
      this.attr.polygons.push(hoodLayer);
    };
    this.setupMouseOver = function(event, data) {
      if (!this.isMobile() && this.attr.enableMouseover) {
        return this.buildInfoWindow(event, data);
      }
    };
    this.showInfoWindow = function(event, polygonData) {
      return $.when(this.buildOnboardData(polygonData)).then((function(_this) {
        return function(infoData) {
          var html;
          if (infoData) {
            html = _.template(_this.attr.infoTemplate, infoData);
            return _this.toolTip.setContent(html);
          }
        };
      })(this));
    };
    this.buildInfoWindow = function(event, polygonData) {
      var html;
      if (!polygonData.data) {
        return polygonData.data;
      }
      html = _.template(this.attr.baseInfoHtml, polygonData.data);
      polygonData.hoodLayer.setMap(this.attr.gMap);
      this.toolTip.setContent(html);
      return this.toolTip.updatePosition(polygonData.hoodLayer);
    };
    this.buildPaths = function(row) {
      var coordinates, geometry;
      coordinates = [];
      if (geometry = row[0].geometry) {
        if (geometry.type === 'Polygon') {
          coordinates = this.makePathsCoordinates(geometry.coordinates[0]);
        }
      }
      return coordinates;
    };
    this.isValidPoint = function(arr) {
      return arr.length >= 2 && _.all(arr, _.isNumber);
    };
    this.makePathsCoordinates = function(coordinates) {
      if (this.isValidPoint(coordinates)) {
        return new google.maps.LatLng(coordinates[1], coordinates[0]);
      } else {
        return _.map(coordinates, this.makePathsCoordinates, this);
      }
    };
    this.buildHoodData = function(row) {
      if (typeof row[0] === 'object') {
        return _.object(['hood', 'state', 'city', 'lat', 'lng'], row.slice(1));
      } else {
        return {};
      }
    };
    this.buildOnboardData = function(polygonData) {
      if (!this.attr.enableOnboardCalls) {
        return polygonData;
      }
      return $.when(this.getOnboardData(polygonData)).then((function(_this) {
        return function(onboardData) {
          var data, demographic, key, ref, value;
          data = _.extend(_this.attr.infoWindowData, polygonData);
          if (!_.isEmpty(onboardData)) {
            demographic = onboardData.demographic;
            ref = _this.attr.infoWindowData;
            for (key in ref) {
              value = ref[key];
              if (demographic[key]) {
                data[key] = _this.formatValue(key, demographic[key]);
              }
            }
          }
          return data;
        };
      })(this));
    };
    this.clearPolygons = function() {
      var i, len, ref, x;
      if (!this.attr.polygons.length) {
        return;
      }
      ref = this.attr.polygons;
      for (i = 0, len = ref.length; i < len; i++) {
        x = ref[i];
        x.setMap(null);
      }
      this.attr.polygons = [];
    };
    this.formatValue = function(key, value) {
      switch (key) {
        case 'median_income':
        case 'average_income':
          return accounting.formatMoney(value);
        case 'population':
          return accounting.formatNumber(value);
        default:
          return value;
      }
    };
    this.getOnboardData = function(data) {
      var query, xhr;
      if (_.isEmpty(data)) {
        return {};
      }
      query = [];
      query.push("state=" + (this.toDashes(data.state)));
      query.push("city=" + (this.toDashes(data.city)));
      query.push("neighborhood=" + (this.toDashes(data.hood)));
      return xhr = $.ajax({
        url: "/meta/community?rectype=NH&" + (query.join('&'))
      }).done(function(data) {
        return data;
      }).fail(function(data) {
        return {};
      }).always(function(data) {
        return data || {};
      });
    };
    this.toDashes = function(value) {
      if (value == null) {
        return '';
      }
      return value.replace(' ', '-');
    };
    this.toSpaces = function(value) {
      if (value == null) {
        return '';
      }
      return value.replace('-', ' ');
    };
    return this.after('initialize', function() {
      if (this.isMobile()) {
        return;
      }
      this.on(document, 'uiNeighborhoodDataRequest', this.addHoodsLayer);
      this.on(document, 'hoodMouseOver', this.setupMouseOver);
      this.on(document, 'hoodOnClick', this.showInfoWindow);
    });
  };
  return defineComponent(neighborhoodsOverlay, mobileDetection);
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpL25laWdoYm9yaG9vZHMuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFlBQUEsQ0FBQTtBQUFBLE1BRUEsQ0FBTyxDQUNMLFFBREssRUFFTCxZQUZLLEVBR0wsc0JBSEssRUFJTCxZQUpLLEVBS0wsMkJBTEssRUFNTCxZQU5LLENBQVAsRUFPRyxTQUNELENBREMsRUFFRCxDQUZDLEVBR0QsZUFIQyxFQUlELFVBSkMsRUFLRCxlQUxDLEVBTUQsT0FOQyxHQUFBO0FBU0QsTUFBQSxvQkFBQTtBQUFBLEVBQUEsQ0FBQyxDQUFDLGdCQUFGLEdBQ0U7QUFBQSxJQUFBLFdBQUEsRUFBYSxnQkFBYjtBQUFBLElBQ0EsUUFBQSxFQUFVLFlBRFY7R0FERixDQUFBO0FBQUEsRUFJQSxvQkFBQSxHQUF1QixTQUFBLEdBQUE7QUFFckIsSUFBQSxJQUFDLENBQUEsWUFBRCxDQUNFO0FBQUEsTUFBQSxZQUFBLEVBQWMsdURBQWQ7QUFBQSxNQUNBLFlBQUEsRUFBYyx5Q0FEZDtBQUFBLE1BRUEsa0JBQUEsRUFBb0IsS0FGcEI7QUFBQSxNQUdBLGVBQUEsRUFBaUIsS0FIakI7QUFBQSxNQUlBLE9BQUEsRUFBUyxNQUpUO0FBQUEsTUFLQSxNQUFBLEVBQVEsTUFMUjtBQUFBLE1BTUEsSUFBQSxFQUFNLE1BTk47QUFBQSxNQU9BLElBQUEsRUFBTSxNQVBOO0FBQUEsTUFRQSxZQUFBLEVBQWMsTUFSZDtBQUFBLE1BU0EsUUFBQSxFQUFVLEVBVFY7QUFBQSxNQVVBLElBQUEsRUFBTSxHQVZOO0FBQUEsTUFXQSxjQUFBLEVBQ0U7QUFBQSxRQUFBLFNBQUEsRUFDRTtBQUFBLFVBQUEsV0FBQSxFQUFhLE1BQWI7QUFBQSxVQUNBLGFBQUEsRUFBZSxFQURmO0FBQUEsVUFFQSxZQUFBLEVBQWMsQ0FGZDtBQUFBLFVBR0EsU0FBQSxFQUFXLE1BSFg7QUFBQSxVQUlBLFdBQUEsRUFBYSxFQUpiO1NBREY7QUFBQSxRQU9BLFFBQUEsRUFDRTtBQUFBLFVBQUEsWUFBQSxF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LEVBQVAsQ0FBQTtPQUFBO2FBRUEsS0FBSyxDQUFDLE9BQU4sQ0FBYyxHQUFkLEVBQW1CLEdBQW5CLEVBSFU7SUFBQSxDQW5NWixDQUFBO0FBQUEsSUF3TUEsSUFBQyxDQUFBLFFBQUQsR0FBWSxTQUFDLEtBQUQsR0FBQTtBQUNWLE1BQUEsSUFBaUIsYUFBakI7QUFBQSxlQUFPLEVBQVAsQ0FBQTtPQUFBO2FBRUEsS0FBSyxDQUFDLE9BQU4sQ0FBYyxHQUFkLEVBQW1CLEdBQW5CLEVBSFU7SUFBQSxDQXhNWixDQUFBO1dBNk1BLElBQUMsQ0FBQSxLQUFELENBQU8sWUFBUCxFQUFxQixTQUFBLEdBQUE7QUFDbkIsTUFBQSxJQUFVLElBQUMsQ0FBQSxRQUFELENBQUEsQ0FBVjtBQUFBLGNBQUEsQ0FBQTtPQUFBO0FBQUEsTUFFQSxJQUFDLENBQUEsRUFBRCxDQUFJLFFBQUosRUFBYywyQkFBZCxFQUEyQyxJQUFDLENBQUEsYUFBNUMsQ0FGQSxDQUFBO0FBQUEsTUFHQSxJQUFDLENBQUEsRUFBRCxDQUFJLFFBQUosRUFBYyxlQUFkLEVBQStCLElBQUMsQ0FBQSxjQUFoQyxDQUhBLENBQUE7QUFBQSxNQUlBLElBQUMsQ0FBQSxFQUFELENBQUksUUFBSixFQUFjLGFBQWQsRUFBNkIsSUFBQyxDQUFBLGNBQTlCLENBSkEsQ0FEbUI7SUFBQSxDQUFyQixFQS9NcUI7RUFBQSxDQUp2QixDQUFBO0FBMk5BLFNBQU8sZUFBQSxDQUFnQixvQkFBaEIsRUFBc0MsZUFBdEMsQ0FBUCxDQXBPQztBQUFBLENBUEgsQ0FGQSxDQUFBIiwiZmlsZSI6InVpL25laWdoYm9yaG9vZHMuanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuZGVmaW5lIFtcbiAgJ2pxdWVyeSdcbiAgJ3VuZGVyc2NvcmUnLFxuICAnZmxpZ2h0L2xpYi9jb21wb25lbnQnLFxuICAnYWNjb3VudGluZydcbiAgJy4uL3V0aWxzL21vYmlsZV9kZXRlY3Rpb24nLFxuICAnLi90b29sX3RpcCdcbl0sIChcbiAgJCxcbiAgXyxcbiAgZGVmaW5lQ29tcG9uZW50LFxuICBhY2NvdW50aW5nLFxuICBtb2JpbGVEZXRlY3Rpb24sXG4gIHRvb2xUaXBcbikgLT5cblxuICBfLnRlbXBsYXRlU2V0dGluZ3MgPVxuICAgIGludGVycG9sYXRlOiAvXFx7XFx7KC4rPylcXH1cXH0vZyxcbiAgICBldmFsdWF0ZTogLzwlKC4rPyklPi9nXG5cbiAgbmVpZ2hib3Job29kc092ZXJsYXkgPSAtPlxuXG4gICAgQGRlZmF1bHRBdHRyc1xuICAgICAgZnVzaW9uQXBpVXJsOiBcImh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2Z1c2lvbnRhYmxlcy92MS9xdWVyeT9zcWw9XCJcbiAgICAgIGJhc2VJbmZvSHRtbDogXCI8c3Ryb25nPk5laWdoYm9yaG9vZDogPC9zdHJvbmc+e3tob29kfX1cIlxuICAgICAgZW5hYmxlT25ib2FyZENhbGxzOiBmYWxzZVxuICAgICAgZW5hYmxlTW91c2VvdmVyOiBmYWxzZVxuICAgICAgdGFibGVJZDogdW5kZWZpbmVkXG4gICAgICBhcGlLZXk6IHVuZGVmaW5lZFxuICAgICAgZ01hcDogdW5kZWZpbmVkXG4gICAgICBkYXRhOiB1bmRlZmluZWRcbiAgICAgIGluZm9UZW1wbGF0ZTogdW5kZWZpbmVkXG4gICAgICBwb2x5Z29uczogW11cbiAgICAgIHdhaXQ6IDIwMFxuICAgICAgcG9seWdvbk9wdGlvbnM6XG4gICAgICAgIG1vdXNlb3ZlcjpcbiAgICAgICAgICBzdHJva2VDb2xvcjogXCIjMDAwXCJcbiAgICAgICAgICBzdHJva2VPcGFjaXR5OiAuNVxuICAgICAgICAgIHN0cm9rZVdlaWdodDogMVxuICAgICAgICAgIGZpbGxDb2xvcjogXCIjMDAwXCJcbiAgICAgICAgICBmaWxsT3BhY2l0eTogLjJcblxuICAgICAgICBtb3VzZW91dDpcbiAgICAgICAgICBzdHJva2VXZWlnaHQ6IDBcbiAgICAgICAgICBmaWxsT3BhY2l0eTogMFxuICAgICAgaW5mb1dpbmRvd0RhdGE6XG4gICAgICAgIHN0YXRlOiB1bmRlZmluZWRcbiAgICAgICAgaG9vZDogdW5kZWZpbmVkXG4gICAgICAgIHBvcHVsYXRpb246IHVuZGVmaW5lZFxuICAgICAgICBncm93dGg6IHVuZGVmaW5lZFxuICAgICAgICBkZW5zaXR5OiB1bmRlZmluZWRcbiAgICAgICAgbWFsZXM6IHVuZGVmaW5lZFxuICAgICAgICBmZW1hbGVzOiB1bmRlZmluZWRcbiAgICAgICAgbWVkaWFuX2luY29tZTogdW5kZWZpbmVkXG4gICAgICAgIGF2ZXJhZ2VfaW5jb21lOiB1bmRlZmluZWRcblxuXG4gICAgQGhvb2RRdWVyeSA9IChkYXRhKSAtPlxuICAgICAgcXVlcnkgPSBbXCJTRUxFQ1QgZ2VvbWV0cnksIEhPT0RfTkFNRSwgU1RBVEVOQU1FLCBNQVJLRVQsIExBVElUVURFLCBMT05HSVRVREVcIl1cbiAgICAgIHF1ZXJ5LnB1c2ggXCJGUk9NICN7QGF0dHIudGFibGVJZH1cIlxuICAgICAgcXVlcnkucHVzaCBcIldIRVJFIExBVElUVURFID49ICN7ZGF0YS5sYXQxfSBBTkQgTEFUSVRVREUgPD0gI3tkYXRhLmxhdDJ9XCJcbiAgICAgIHF1ZXJ5LnB1c2ggXCJBTkQgTE9OR0lUVURFID49ICN7ZGF0YS5sbmcxfSBBTkQgTE9OR0lUVURFIDw9ICN7ZGF0YS5sbmcyfVwiXG4gICAgICBxdWVyeS5qb2luKCcgJylcblxuICAgIEBhZGRIb29kc0xheWVyID0gKGV2LCBkYXRhKSAtPlxuICAgICAgQGF0dHIuZ01hcCA9IGRhdGEuZ01hcFxuICAgICAgQGF0dHIuZGF0YSA9IGRhdGFcbiAgICAgIEBhdHRyLmN1cnJlbnRIb29kID0gIEBhdHRyLmRhdGEuaG9vZERpc3BsYXlOYW1lIG9yIEBhdHRyLmRhdGEuaG9vZCBvciAnJ1xuICAgICAgVG9vbFRpcCA9IHRvb2xUaXAuY2xhc3MoKVxuICAgICAgQHRvb2xUaXAgPSBuZXcgVG9vbFRpcChAYXR0ci5nTWFwKSB1bmxlc3MgQHRvb2xUaXBcbiAgICAgIEBnZXRLbWxEYXRhKGRhdGEpXG5cbiAgICBAZ2V0S21sRGF0YSA9IChkYXRhKSAtPlxuICAgICAgcXVlcnkgPSBAaG9vZFF1ZXJ5KGRhdGEpXG4gICAgICB1cmwgPSBbQGF0dHIuZnVzaW9uQXBpVXJsXVxuICAgICAgdXJsLnB1c2ggZW5jb2RlVVJJQ29tcG9uZW50KEBob29kUXVlcnkoZGF0YSkpXG4gICAgICB1cmwucHVzaCBcIiZrZXk9I3tAYXR0ci5hcGlLZXl9XCJcblxuICAgICAgJC5hamF4XG4gICAgICAgIHVybDogdXJsLmpvaW4oXCJcIilcbiAgICAgICAgZGF0YVR5cGU6IFwianNvbnBcIlxuICAgICAgICBzdWNjZXNzOiAoZGF0YSkgPT5cbiAgICAgICAgICBAYnVpbGRQb2x5Z29ucyhkYXRhKVxuXG4gICAgQGJ1aWxkUG9seWdvbnMgPSAoZGF0YSkgLT5cbiAgICAgIHJldHVybiB1bmxlc3MgZGF0YSBhbmQgZGF0YS5yb3dzXG5cbiAgICAgIHJvd3MgPSBkYXRhLnJvd3NcbiAgICAgIEBjbGVhclBvbHlnb25zKClcbiAgICAgIGZvciByb3cgaW4gcm93c1xuICAgICAgICBjb250aW51ZSB1bmxlc3Mgcm93c1swXVxuXG4gICAgICAgIHBvbHlnb25EYXRhID0gQGJ1aWxkUGF0aHMocm93KVxuICAgICAgICBob29kRGF0YSA9IEBidWlsZEhvb2REYXRhKHJvdylcblxuICAgICAgICBAd2lyZXVwUG9seWdvbihwb2x5Z29uRGF0YSwgaG9vZERhdGEpXG5cbiAgICBAd2lyZXVwUG9seWdvbiA9IChwb2x5Z29uRGF0YSwgaG9vZERhdGEpIC0+XG4gICAgICBtb3VzZU92ZXJPcHRpb25zID0gQGF0dHIucG9seWdvbk9wdGlvbnMubW91c2VvdmVyXG4gICAgICBtb3VzZU91dE9wdGlvbnMgPSBAYXR0ci5wb2x5Z29uT3B0aW9ucy5tb3VzZW91dFxuXG4gICAgICBpc0N1cnJlbnRIb29kID0gKEBhdHRyLmN1cnJlbnRIb29kID09IGhvb2REYXRhLmhvb2QpXG4gICAgICBpbml0aWFsT3B0aW9ucyA9IGlmIGlzQ3VycmVudEhvb2QgdGhlbiBtb3VzZU92ZXJPcHRpb25zIGVsc2UgbW91c2VPdXRPcHRpb25zXG5cbiAgICAgIGhvb2RMYXllciA9IG5ldyBnb29nbGUubWFwcy5Qb2x5Z29uKFxuICAgICAgICBfLmV4dGVuZCh7cGF0aHM6cG9seWdvbkRhdGF9LCBpbml0aWFsT3B0aW9ucylcbiAgICAgIClcblxuICAgICAgaG9vZExheWVyLnNldE1hcCBAYXR0ci5nTWFwXG5cbiAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LmFkZExpc3RlbmVyIGhvb2RMYXllciwgXCJtb3VzZW92ZXJcIiwgKGV2ZW50KSA9PlxuICAgICAgICBob29kTGF5ZXIuc2V0T3B0aW9ucyhtb3VzZU92ZXJPcHRpb25zKVxuICAgICAgICBAc2V0dXBNb3VzZU92ZXIoZXZlbnQsIHsgZGF0YTogaG9vZERhdGEsIGhvb2RMYXllcjogaG9vZExheWVyIH0pXG5cbiAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LmFkZExpc3RlbmVyIGhvb2RMYXllciwgXCJjbGlja1wiLCAoZXZlbnQpID0+XG4gICAgICAgIGRhdGEgPSBfLmV4dGVuZChob29kTGF5ZXIsIGhvb2REYXRhLCBldmVudClcbiAgICAgICAgQHNob3dJbmZvV2luZG93KGV2ZW50LCBob29kRGF0YSlcblxuXG4gICAgICBnb29nbGUubWFwcy5ldmVudC5hZGRMaXN0ZW5lciBob29kTGF5ZXIsIFwibW91c2VvdXRcIiwgPT5cbiAgICAgICAgQHRvb2xUaXAuaGlkZSgpXG4gICAgICAgIHVubGVzcyBpc0N1cnJlbnRIb29kXG4gICAgICAgICAgaG9vZExheWVyLnNldE9wdGlvbnMobW91c2VPdXRPcHRpb25zKVxuXG4gICAgICBAYXR0ci5wb2x5Z29ucy5wdXNoIGhvb2RMYXllclxuXG4gICAgICByZXR1cm5cblxuICAgIEBzZXR1cE1vdXNlT3ZlciA9IChldmVudCwgZGF0YSkgLT5cbiAgICAgIGlmICFAaXNNb2JpbGUoKSAmJiBAYXR0ci5lbmFibGVNb3VzZW92ZXJcbiAgICAgICAgQGJ1aWxkSW5mb1dpbmRvdyhldmVudCwgZGF0YSlcblxuICAgIEBzaG93SW5mb1dpbmRvdyA9IChldmVudCwgcG9seWdvbkRhdGEpIC0+XG4gICAgICAkLndoZW4oQGJ1aWxkT25ib2FyZERhdGEocG9seWdvbkRhdGEpKS50aGVuIChpbmZvRGF0YSkgPT5cbiAgICAgICAgaWYgaW5mb0RhdGFcbiAgICAgICAgICBodG1sID0gXy50ZW1wbGF0ZShAYXR0ci5pbmZvVGVtcGxhdGUsIGluZm9EYXRhKVxuICAgICAgICAgIEB0b29sVGlwLnNldENvbnRlbnQoaHRtbClcblxuICAgIEBidWlsZEluZm9XaW5kb3cgPSAoZXZlbnQsIHBvbHlnb25EYXRhKSAtPlxuICAgICAgcmV0dXJuIHBvbHlnb25EYXRhLmRhdGEgdW5sZXNzIHBvbHlnb25EYXRhLmRhdGFcblxuICAgICAgaHRtbCA9IF8udGVtcGxhdGUoQGF0dHIuYmFzZUluZm9IdG1sLCBwb2x5Z29uRGF0YS5kYXRhKVxuICAgICAgcG9seWdvbkRhdGEuaG9vZExheWVyLnNldE1hcChAYXR0ci5nTWFwKVxuXG4gICAgICBAdG9vbFRpcC5zZXRDb250ZW50KGh0bWwpXG4gICAgICBAdG9vbFRpcC51cGRhdGVQb3NpdGlvbihwb2x5Z29uRGF0YS5ob29kTGF5ZXIpXG5cbiAgICBAYnVpbGRQYXRocyA9IChyb3cpIC0+XG4gICAgICBjb29yZGluYXRlcyA9IFtdXG4gICAgICBpZiBnZW9tZXRyeSA9IHJvd1swXS5nZW9tZXRyeVxuICAgICAgICBpZiBnZW9tZXRyeS50eXBlID09ICdQb2x5Z29uJ1xuICAgICAgICAgIGNvb3JkaW5hdGVzID0gQG1ha2VQYXRoc0Nvb3JkaW5hdGVzKGdlb21ldHJ5LmNvb3JkaW5hdGVzWzBdKVxuICAgICAgY29vcmRpbmF0ZXNcblxuICAgIEBpc1ZhbGlkUG9pbnQgPSAoYXJyKSAtPlxuICAgICAgYXJyLmxlbmd0aCA+PSAyIGFuZCBfLmFsbChhcnIsIF8uaXNOdW1iZXIpXG5cbiAgICBAbWFrZVBhdGhzQ29vcmRpbmF0ZXMgPSAoY29vcmRpbmF0ZXMpIC0+XG4gICAgICBpZiB0aGlzLmlzVmFsaWRQb2ludChjb29yZGluYXRlcylcbiAgICAgICAgbmV3IGdvb2dsZS5tYXBzLkxhdExuZyhjb29yZGluYXRlc1sxXSwgY29vcmRpbmF0ZXNbMF0pXG4gICAgICBlbHNlXG4gICAgICAgIF8ubWFwKGNvb3JkaW5hdGVzLCBAbWFrZVBhdGhzQ29vcmRpbmF0ZXMsIHRoaXMpXG5cbiAgICBAYnVpbGRIb29kRGF0YSA9IChyb3cpIC0+XG4gICAgICBpZiB0eXBlb2Ygcm93WzBdID09ICdvYmplY3QnXG4gICAgICAgIF8ub2JqZWN0KFsnaG9vZCcsICdzdGF0ZScsICdjaXR5JywgJ2xhdCcsICdsbmcnXSwgcm93LnNsaWNlKDEpKVxuICAgICAgZWxzZVxuICAgICAgICB7fVxuXG4gICAgQGJ1aWxkT25ib2FyZERhdGEgPSAocG9seWdvbkRhdGEpIC0+XG4gICAgICByZXR1cm4gcG9seWdvbkRhdGEgdW5sZXNzIEBhdHRyLmVuYWJsZU9uYm9hcmRDYWxsc1xuXG4gICAgICAkLndoZW4oQGdldE9uYm9hcmREYXRhKHBvbHlnb25EYXRhKSkudGhlbiAob25ib2FyZERhdGEpID0+XG4gICAgICAgIGRhdGEgPSBfLmV4dGVuZChAYXR0ci5pbmZvV2luZG93RGF0YSwgcG9seWdvbkRhdGEpXG5cbiAgICAgICAgdW5sZXNzIF8uaXNFbXB0eShvbmJvYXJkRGF0YSlcbiAgICAgICAgICBkZW1vZ3JhcGhpYyA9IG9uYm9hcmREYXRhLmRlbW9ncmFwaGljXG4gICAgICAgICAgZm9yIGtleSwgdmFsdWUgb2YgQGF0dHIuaW5mb1dpbmRvd0RhdGFcbiAgICAgICAgICAgIGlmIGRlbW9ncmFwaGljW2tleV1cbiAgICAgICAgICAgICAgZGF0YVtrZXldID0gQGZvcm1hdFZhbHVlKGtleSwgZGVtb2dyYXBoaWNba2V5XSlcblxuICAgICAgICBkYXRhXG5cbiAgICBAY2xlYXJQb2x5Z29ucyA9IC0+XG4gICAgICByZXR1cm4gdW5sZXNzIEBhdHRyLnBvbHlnb25zLmxlbmd0aFxuXG4gICAgICBmb3IgeCBpbiBAYXR0ci5wb2x5Z29uc1xuICAgICAgICB4LnNldE1hcChudWxsKVxuXG4gICAgICBAYXR0ci5wb2x5Z29ucyA9IFtdXG4gICAgICByZXR1cm5cblxuICAgIEBmb3JtYXRWYWx1ZSA9IChrZXksIHZhbHVlKSAtPlxuICAgICAgc3dpdGNoIGtleVxuICAgICAgICB3aGVuICdtZWRpYW5faW5jb21lJywgJ2F2ZXJhZ2VfaW5jb21lJ1xuICAgICAgICAgIGFjY291bnRpbmcuZm9ybWF0TW9uZXkodmFsdWUpXG4gICAgICAgIHdoZW4gJ3BvcHVsYXRpb24nXG4gICAgICAgICAgYWNjb3VudGluZy5mb3JtYXROdW1iZXIodmFsdWUpXG4gICAgICAgIGVsc2VcbiAgICAgICAgICB2YWx1ZVxuXG4gICAgQGdldE9uYm9hcmREYXRhID0gKGRhdGEpIC0+XG4gICAgICByZXR1cm4ge30gaWYgXy5pc0VtcHR5KGRhdGEpXG5cbiAgICAgIHF1ZXJ5ID0gW11cbiAgICAgIHF1ZXJ5LnB1c2ggXCJzdGF0ZT0je0B0b0Rhc2hlcyhkYXRhLnN0YXRlKX1cIlxuICAgICAgcXVlcnkucHVzaCBcImNpdHk9I3tAdG9EYXNoZXMoZGF0YS5jaXR5KX1cIlxuICAgICAgcXVlcnkucHVzaCBcIm5laWdoYm9yaG9vZD0je0B0b0Rhc2hlcyhkYXRhLmhvb2QpfVwiXG5cbiAgICAgIHhociA9ICQuYWpheFxuICAgICAgICB1cmw6IFwiL21ldGEvY29tbXVuaXR5P3JlY3R5cGU9TkgmI3txdWVyeS5qb2luKCcmJyl9XCJcbiAgICAgIC5kb25lIChkYXRhKSAtPlxuICAgICAgICBkYXRhXG4gICAgICAuZmFpbCAoZGF0YSkgLT5cbiAgICAgICAge31cbiAgICAgIC5hbHdheXMgKGRhdGEpIC0+XG4gICAgICAgIGRhdGEgfHwge31cbiAgICBAdG9EYXNoZXMgPSAodmFsdWUpIC0+XG4gICAgICByZXR1cm4gJycgdW5sZXNzIHZhbHVlP1xuXG4gICAgICB2YWx1ZS5yZXBsYWNlKCcgJywgJy0nKVxuXG4gICAgQHRvU3BhY2VzID0gKHZhbHVlKSAtPlxuICAgICAgcmV0dXJuICcnIHVubGVzcyB2YWx1ZT9cblxuICAgICAgdmFsdWUucmVwbGFjZSgnLScsICcgJylcblxuICAgIEBhZnRlciAnaW5pdGlhbGl6ZScsIC0+XG4gICAgICByZXR1cm4gaWYgQGlzTW9iaWxlKClcblxuICAgICAgQG9uIGRvY3VtZW50LCAndWlOZWlnaGJvcmhvb2REYXRhUmVxdWVzdCcsIEBhZGRIb29kc0xheWVyXG4gICAgICBAb24gZG9jdW1lbnQsICdob29kTW91c2VPdmVyJywgQHNldHVwTW91c2VPdmVyXG4gICAgICBAb24gZG9jdW1lbnQsICdob29kT25DbGljaycsIEBzaG93SW5mb1dpbmRvd1xuICAgICAgcmV0dXJuXG5cbiAgcmV0dXJuIGRlZmluZUNvbXBvbmVudChuZWlnaGJvcmhvb2RzT3ZlcmxheSwgbW9iaWxlRGV0ZWN0aW9uKVxuIl19