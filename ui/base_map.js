// Generated by CoffeeScript 1.6.3
(function() {
  'use strict';
  define(['flight/lib/component', '../utils/distance_conversion'], function(defineComponent, distanceConversion) {
    var defaultMap;
    defaultMap = function() {
      this.defaultAttrs({
        latitude: 33.9411,
        longitude: -84.2136,
        gMap: {},
        gMapEvents: {
          'center_changed': false,
          'zoom_changed': false
        },
        infoWindowOpen: false,
        overlay: void 0,
        draggable: true,
        geoData: {},
        gMapOptions: {}
      });
      this.after('initialize', function() {
        var _this = this;
        this.on(document, 'mapDataAvailable', this.initBaseMap);
        this.on(document, 'mapRendered', this.consolidateMapChangeEvents);
        this.on(document, 'mapCanvasResized', this.resizeMapContainer);
        this.on(document, 'uiInfoWindowDataRequest', function() {
          return _this.attr.infoWindowOpen = true;
        });
      });
      this.initBaseMap = function(ev, data) {
        this.data = data || {};
        return this.firstRender();
      };
      this.consolidateMapChangeEvents = function(ev, data) {
        var _this = this;
        google.maps.event.addListenerOnce(data.gMap, 'zoom_changed', function() {
          return _this.trigger(document, 'uiMapZoom', _this.mapChangedData());
        });
        return google.maps.event.addListenerOnce(data.gMap, 'dragend', function() {
          return _this.trigger(document, 'uiMapDrag', _this.mapChangedData());
        });
      };
      this.resizeMapContainer = function(ev, data) {
        if (data && data.width && data.height) {
          this.$node.css({
            height: data.height,
            width: data.width
          });
        }
        return google.maps.event.trigger(this.attr.gMap, 'resize');
      };
      this.intervalId = null;
      this.firstRender = function() {
        var _this = this;
        google.maps.visualRefresh = true;
        this.attr.gMap = new google.maps.Map(this.node, this.defineGoogleMapOptions());
        google.maps.event.addListenerOnce(this.attr.gMap, 'idle', function() {
          _this.fireOurMapEventsOnce();
          return _this.handleOurMapEvents();
        });
        return this.addCustomMarker();
      };
      this.fireOurMapEventsOnce = function() {
        clearInterval(this.intervalId);
        this.trigger(document, 'mapRenderedFirst', this.mapRenderedFirstData());
        this.trigger(document, 'mapRendered', this.mapRenderedFirstData());
        this.trigger(document, 'uiInitMarkerCluster', this.mapChangedData());
        return this.trigger(document, "uiNeighborhoodDataRequest", this.mapChangedDataBase());
      };
      this.handleOurMapEvents = function(event_type) {
        var _this = this;
        google.maps.event.addListener(this.attr.gMap, 'zoom_changed', function() {
          return _this.storeEvent('zoom_changed');
        });
        google.maps.event.addListener(this.attr.gMap, 'center_changed', function() {
          return _this.storeEvent('center_changed');
        });
        google.maps.event.addListener(this.attr.gMap, 'idle', function() {
          return _this.fireOurMapEvents();
        });
      };
      this.storeEvent = function(event) {
        return this.attr.gMapEvents[event] = true;
      };
      this.fireOurMapEvents = function() {
        var eventsHash;
        eventsHash = this.attr.gMapEvents;
        if (this.attr.infoWindowOpen === true) {
          eventsHash['center_changed'] = false;
        }
        clearInterval(this.intervalId);
        if (eventsHash['center_changed']) {
          this.trigger(document, 'uiMapZoomForListings', this.mapChangedData());
          if (!this.attr.infoWindowOpen) {
            this.trigger(document, 'mapRendered', this.mapChangedData());
          }
          this.trigger(document, 'uiInitMarkerCluster', this.mapChangedData());
          this.trigger(document, "uiNeighborhoodDataRequest", this.mapChangedDataBase());
        }
        return this.resetOurEventHash();
      };
      this.resetOurEventHash = function() {
        this.attr.gMapEvents['zoom_changed'] = false;
        this.attr.gMapEvents['center_changed'] = false;
        this.attr.infoWindowOpen = false;
      };
      this.defineGoogleMapOptions = function() {
        var gCenter, geo;
        geo = this.getInitialGeo();
        gCenter = new google.maps.LatLng(geo.lat, geo.lng);
        return {
          center: gCenter,
          zoom: this.radiusToZoom(this.geoDataRadiusMiles()),
          mapTypeId: google.maps.MapTypeId.ROADMAP,
          scaleControl: true,
          draggable: this.attr.gMapOptions.draggable
        };
      };
      this.radiusToZoom = function(radius) {
        if (radius == null) {
          radius = 10;
        }
        return Math.round(14 - Math.log(radius) / Math.LN2) + 1;
      };
      this.latitude = function() {
        return this.attr.latitude = this.mapCenter().lat();
      };
      this.longitude = function() {
        return this.attr.longitude = this.mapCenter().lng();
      };
      this.southWestLatitude = function() {
        return this.attr.gMap.getBounds().getSouthWest().lat();
      };
      this.southWestLongitude = function() {
        return this.attr.gMap.getBounds().getSouthWest().lng();
      };
      this.northEastLatitude = function() {
        return this.attr.gMap.getBounds().getNorthEast().lat();
      };
      this.northEastLongitude = function() {
        return this.attr.gMap.getBounds().getNorthEast().lng();
      };
      this.radius = function() {
        var gBounds, latitudinalDistance, longitudinalDistance, radiusInMeters, south, southWest, west;
        gBounds = this.attr.gMap.getBounds();
        southWest = gBounds.getSouthWest();
        west = new google.maps.LatLng(this.latitude(), southWest.lng());
        south = new google.maps.LatLng(southWest.lat(), this.longitude());
        longitudinalDistance = google.maps.geometry.spherical.computeDistanceBetween(west, this.mapCenter());
        latitudinalDistance = google.maps.geometry.spherical.computeDistanceBetween(south, this.mapCenter());
        return radiusInMeters = Math.max(longitudinalDistance, latitudinalDistance);
      };
      this.mapCenter = function() {
        var gLatLng;
        return gLatLng = this.attr.gMap.getCenter();
      };
      this.addCustomMarker = function() {
        return this.customMarkerDialogClose();
      };
      this.customMarkerDialogClose = function() {
        var _this = this;
        return $('#pin_search_controls a.icon_close').click(function() {
          return $('#pin_search_controls').remove();
        });
      };
      this.mapRenderedFirstData = function() {
        var data;
        data = this.mapChangedData();
        data.zip = this.geoData().zip;
        data.city = this.geoData().city;
        data.state = this.geoData().state;
        data.hood = this.geoData().hood;
        return data;
      };
      this.mapChangedData = function() {
        var data;
        data = this.mapChangedDataBase();
        data.sort = 'distance';
        return data;
      };
      this.mapChangedDataBase = function() {
        return {
          gMap: this.attr.gMap,
          latitude: this.latitude(),
          longitude: this.longitude(),
          radius: this.radius(),
          lat1: this.southWestLatitude(),
          lng1: this.southWestLongitude(),
          lat2: this.northEastLatitude(),
          lng2: this.northEastLongitude(),
          zip: this.geoData().zip,
          city: this.geoData().city,
          state: this.geoData().state,
          hood: this.geoData().hood,
          hoodDisplayName: this.geoData().hood_display_name
        };
      };
      this.zoomCircle = function() {
        var circle, circleOptions, radius;
        radius = distanceConversion.convertMilesToMeters(this.geoDataRadiusMiles());
        circleOptions = {
          center: this.mapCenter(),
          map: this.attr.gMap,
          radius: radius,
          fillOpacity: 0.0,
          strokeOpacity: 0.0
        };
        return circle = new google.maps.Circle(circleOptions);
      };
      this.geoDataRadiusMiles = function() {
        return this.geoData().rad || 10;
      };
      this.geoData = function() {
        return this.attr.geoData || {};
      };
      return this.getInitialGeo = function() {
        return {
          lat: this.data.lat || this.data.latitude || this.attr.latitude,
          lng: this.data.lng || this.data.longitude || this.attr.longitude
        };
      };
    };
    return defineComponent(defaultMap);
  });

}).call(this);
